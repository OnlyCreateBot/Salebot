import os
import logging
import sqlite3
import datetime
import requests
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    CallbackContext
)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
class Config:
    # –¢–æ–∫–µ–Ω—ã (–∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ Secrets Replit)
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))  # –í–∞—à Telegram ID
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT4Free (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞)
    AI_PROVIDER = "you"  # you, deepai, theb - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    MAX_TOKENS = 300
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å–∞
    BUSINESS_NAME = "AI Bot Solutions"
    SERVICE_PRICE = "–æ—Ç 20 000 —Ä—É–±."
    DEVELOPMENT_TIME = "5-10 –¥–Ω–µ–π"
    SUPPORT_PHONE = "+79998887766"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_NAME = "leads.db"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    PORT = int(os.getenv('PORT', 8080))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    REMINDER_INTERVAL = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    @staticmethod
    def get_webhook_url():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –≤ Replit"""
        try:
            owner = os.environ['REPL_OWNER']
            slug = os.environ['REPL_SLUG']
            return f"https://{slug}.{owner}.repl.co"
        except:
            return "https://your-domain.com"

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(Config.DB_NAME)
        self.create_tables()
        
    def create_tables(self):
        c = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        c.execute('''CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            contact TEXT NOT NULL,
            business_type TEXT,
            bot_tasks TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            question TEXT NOT NULL,
            answer TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS knowledge_base (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        self.conn.commit()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞—è–≤–æ–∫
    def add_request(self, user_data: dict):
        c = self.conn.cursor()
        c.execute('''INSERT INTO requests 
                    (user_id, username, contact, business_type, bot_tasks)
                    VALUES (?, ?, ?, ?, ?)''',
                  (user_data['user_id'], 
                   user_data.get('username', ''),
                   user_data['contact'],
                   user_data.get('business_type', ''),
                   user_data.get('bot_tasks', '')))
        self.conn.commit()
        return c.lastrowid
    
    def get_requests(self, status='new'):
        c = self.conn.cursor()
        c.execute("SELECT * FROM requests WHERE status = ?", (status,))
        return c.fetchall()
    
    def update_request_status(self, request_id: int, status: str):
        c = self.conn.cursor()
        c.execute("UPDATE requests SET status = ? WHERE id = ?", (status, request_id))
        self.conn.commit()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    def add_question(self, user_id: int, username: str, question: str):
        c = self.conn.cursor()
        c.execute('''INSERT INTO questions 
                    (user_id, username, question)
                    VALUES (?, ?, ?)''',
                  (user_id, username, question))
        self.conn.commit()
        return c.lastrowid
    
    def get_questions(self, answered=False):
        c = self.conn.cursor()
        c.execute("SELECT * FROM questions WHERE answer IS " + ("NOT NULL" if answered else "NULL"))
        return c.fetchall()
    
    def answer_question(self, question_id: int, answer: str):
        c = self.conn.cursor()
        c.execute("UPDATE questions SET answer = ? WHERE id = ?", (answer, question_id))
        self.conn.commit()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    def add_to_knowledge_base(self, question: str, answer: str):
        c = self.conn.cursor()
        c.execute("INSERT INTO knowledge_base (question, answer) VALUES (?, ?)", (question, answer))
        self.conn.commit()
    
    def get_knowledge_base(self):
        c = self.conn.cursor()
        c.execute("SELECT question, answer FROM knowledge_base")
        return c.fetchall()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    def get_inactive_leads(self, days=2):
        c = self.conn.cursor()
        c.execute('''SELECT * FROM requests 
                    WHERE status = 'new' 
                    AND date(created_at) <= date('now', ?)''', (f'-{days} days',))
        return c.fetchall()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# ===== –¢–ï–ö–°–¢–´ =====
GREETING = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ {Config.BUSINESS_NAME}.
–ü–æ–º–æ–≥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é Telegram-–±–æ—Ç–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

SERVICE_INFO = f"""
‚ö°Ô∏è *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*
- –°–æ–∑–¥–∞–Ω–∏–µ AI-–±–æ—Ç–æ–≤ –¥–ª—è Telegram
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –ë–æ—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

‚è± *–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* {Config.DEVELOPMENT_TIME}
üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {Config.SERVICE_PRICE}

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {Config.SUPPORT_PHONE}
"""

REQUEST_FLOW = [
    "üìù –î–ª—è –∫–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω—É–∂–µ–Ω –±–æ—Ç?",
    "üîß –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –±–æ—Ç?",
    "üì± –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):"
]

# ===== AI –§–£–ù–ö–¶–ò–ò (GPT4Free) =====
async def generate_ai_response(user_input: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT4Free"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º gpt4free —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        from gpt4free import you
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = f"""
        –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ {Config.BUSINESS_NAME}, 
        —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram-–±–æ—Ç–æ–≤. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:

        1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram-–±–æ—Ç–æ–≤
        2. –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–µ–Ω (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        3. –ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø—Ä–µ–¥–ª–æ–∂–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        4. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        5. –û–ø—Ä–µ–¥–µ–ª—è–π —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å–∞:
        - –°—Ç–æ–∏–º–æ—Å—Ç—å: {Config.SERVICE_PRICE}
        - –°—Ä–æ–∫–∏: {Config.DEVELOPMENT_TIME}
        - –ö–æ–Ω—Ç–∞–∫—Ç—ã: {Config.SUPPORT_PHONE}
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GPT4Free
        response = you.Completion.create(
            prompt=full_prompt,
            chat=[]  # –ü—É—Å—Ç–æ–π —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        )
        
        if response and hasattr(response, 'text'):
            return response.text.strip()[:Config.MAX_TOKENS]
        else:
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except Exception as e:
        logger.error(f"GPT4Free error: {str(e)}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ requests (–µ—Å–ª–∏ gpt4free –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        try:
            return await generate_ai_response_fallback(user_input)
        except:
            return "ü§ñ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."

async def generate_ai_response_fallback(user_input: str) -> str:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–æ–≤
        bot_keywords = ["–±–æ—Ç", "telegram", "—Å–æ–∑–¥–∞–Ω–∏", "—Ä–∞–∑—Ä–∞–±", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑", "–ª–∏–¥", "–∑–∞—è–≤–∫"]
        user_input_lower = user_input.lower()
        
        if not any(keyword in user_input_lower for keyword in bot_keywords):
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram-–±–æ—Ç–æ–≤. –ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º?"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        url = "https://api.deepai.org/api/text-generator"
        headers = {"api-key": "quickstart-QUdJIGlzIGNvbWluZy4uLi4K"}
        
        prompt = f"""
        –¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤. 
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–∞—Ö.
        –í–æ–ø—Ä–æ—Å: {user_input}
        –û—Ç–≤–µ—Ç:
        """
        
        response = requests.post(
            url, 
            data={"text": prompt},
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("output", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")[:Config.MAX_TOKENS]
        else:
            return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except Exception as e:
        logger.error(f"Fallback AI error: {str(e)}")
        return "ü§ñ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='request_bot')],
        [InlineKeyboardButton("‚ÑπÔ∏è –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='info')],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(GREETING, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'request_bot':
        context.user_data[user_id] = {'step': 0}
        await query.edit_message_text(text=REQUEST_FLOW[0])
    
    elif query.data == 'info':
        await query.edit_message_text(text=SERVICE_INFO, parse_mode='Markdown')
    
    elif query.data == 'ask_question':
        context.user_data[user_id] = {'mode': 'question'}
        await query.edit_message_text(text="‚úèÔ∏è –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    
    elif query.data == 'contact_manager':
        context.user_data[user_id] = {'mode': 'contact'}
        await query.edit_message_text(text="üì± –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "N/A"
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = context.user_data.get(user_id, {})
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    if 'step' in user_data:
        step = user_data['step']
        
        if step == 0:
            context.user_data[user_id] = {
                'step': 1,
                'business_type': text
            }
            await update.message.reply_text(REQUEST_FLOW[1])
            
        elif step == 1:
            context.user_data[user_id] = {
                'step': 2,
                'business_type': user_data['business_type'],
                'bot_tasks': text
            }
            await update.message.reply_text(REQUEST_FLOW[2])
            
        elif step == 2:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            request_data = {
                'user_id': user_id,
                'username': username,
                'contact': text,
                'business_type': user_data.get('business_type', ''),
                'bot_tasks': user_data.get('bot_tasks', '')
            }
            
            request_id = db.add_request(request_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await notify_admin(
                context, 
                f"üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}!\n"
                f"–û—Ç: @{username}\n"
                f"–ë–∏–∑–Ω–µ—Å: {request_data['business_type']}\n"
                f"–ó–∞–¥–∞—á–∏: {request_data['bot_tasks'][:100]}"
            )
            
            await update.message.reply_text(
                "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            del context.user_data[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    elif user_data.get('mode') == 'question':
        question_id = db.add_question(user_id, username, text)
        await notify_admin(
            context, 
            f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id}!\n"
            f"–û—Ç: @{username}\n"
            f"–í–æ–ø—Ä–æ—Å: {text[:200]}"
        )
        await update.message.reply_text("‚úâÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        del context.user_data[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    elif user_data.get('mode') == 'contact':
        await notify_admin(
            context, 
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
            f"ID: {user_id}\n"
            f"Username: @{username}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {text}"
        )
        await update.message.reply_text("‚úÖ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        del context.user_data[user_id]
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI
    else:
        response = await generate_ai_response(text)
        await update.message.reply_text(response)

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if Config.ADMIN_USER_ID:
        try:
            await context.bot.send_message(
                chat_id=Config.ADMIN_USER_ID,
                text=message
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.message.from_user.id != Config.ADMIN_USER_ID:
        return
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='list_requests')],
        [InlineKeyboardButton("‚ùì –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='list_questions')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'list_requests':
        requests = db.get_requests()
        if not requests:
            await query.message.reply_text("üü¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
            return
        
        for req in requests:
            text = (f"üìã –ó–∞—è–≤–∫–∞ #{req[0]}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req[2]}\n"
                    f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {req[3]}\n"
                    f"üè¢ –ë–∏–∑–Ω–µ—Å: {req[4]}")
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_req_{req[0]}'),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_req_{req[0]}')
                ]
            ]
            await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data == 'list_questions':
        questions = db.get_questions(answered=False)
        if not questions:
            await query.message.reply_text("üü¢ –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç")
            return
        
        for q in questions:
            text = (f"‚ùì –í–æ–ø—Ä–æ—Å #{q[0]}\n"
                    f"üë§ –û—Ç: @{q[2]}\n"
                    f"üìù –¢–µ–∫—Å—Ç: {q[3][:100]}")
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'answer_{q[0]}')]
            ]
            await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data.startswith('accept_req_'):
        request_id = int(query.data.split('_')[2])
        db.update_request_status(request_id, "accepted")
        await query.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞")
    
    elif query.data.startswith('reject_req_'):
        request_id = int(query.data.split('_')[2])
        db.update_request_status(request_id, "rejected")
        await query.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    elif query.data.startswith('answer_'):
        question_id = int(query.data.split('_')[1])
        context.user_data['answering_question'] = question_id
        await query.message.reply_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}:")

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.message.from_user.id != Config.ADMIN_USER_ID:
        return
    
    text = update.message.text
    
    # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if 'answering_question' in context.user_data:
        question_id = context.user_data['answering_question']
        db.answer_question(question_id, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        question_data = next((q for q in db.get_questions() if q[0] == question_id), None)
        if question_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=question_data[1],
                    text=f"‚ÑπÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{text}"
                )
            except:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            db.add_to_knowledge_base(question_data[3], text)
        
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        del context.user_data['answering_question']

# ===== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====
async def send_reminders(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ª–∏–¥–∞–º"""
    try:
        inactive_leads = db.get_inactive_leads()
        for lead in inactive_leads:
            try:
                await context.bot.send_message(
                    chat_id=lead[1],
                    text="üëã –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞! "
                         "–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(Config.TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(admin_button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message))
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if Config.ADMIN_USER_ID:
        application.job_queue.run_repeating(
            send_reminders, 
            interval=Config.REMINDER_INTERVAL, 
            first=10
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        url = Config.get_webhook_url()
        application.run_webhook(
            listen="0.0.0.0",
            port=Config.
