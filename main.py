import os
import logging
import sqlite3
import datetime
import requests
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    CallbackContext
)
from telegram.constants import ParseMode
from flask import Flask, request

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
class Config:
    # –¢–æ–∫–µ–Ω—ã (–∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ Secrets Replit)
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))
    MANAGER_USER_IDS = [int(uid) for uid in os.getenv('MANAGER_USER_IDS', '').split(',') if uid]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–∑–Ω–µ—Å–∞
    BUSINESS_NAME = "Create AI Bot"
    SERVICE_PRICE = "–æ—Ç 100 000 —Ç–≥."
    DEVELOPMENT_TIME = "7-14 –¥–Ω–µ–π"
    SUPPORT_PHONE = "@arufak"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_NAME = "leads.db"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    PORT = int(os.getenv('PORT', 8080))
    REMINDER_INTERVAL = 86400  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    @staticmethod
    def get_webhook_url():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –≤ Replit"""
        try:
            repl_owner = os.environ.get('REPL_OWNER', 'unknown')
            repl_slug = os.environ.get('REPL_SLUG', 'unknown')
            return f"https://{repl_slug}.{repl_owner}.repl.co"
        except:
            return "https://your-domain.com"

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(Config.DB_NAME, check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        c = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        c.execute('''CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            contact TEXT NOT NULL,
            business_type TEXT,
            bot_tasks TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')

        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            question TEXT NOT NULL,
            answer TEXT,
            status TEXT DEFAULT 'new',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS knowledge_base (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')

        # –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS managers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            is_active BOOLEAN DEFAULT TRUE
        )''')

        self.conn.commit()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞—è–≤–æ–∫
    def add_request(self, user_data: dict):
        c = self.conn.cursor()
        c.execute('''INSERT INTO requests 
                    (user_id, username, contact, business_type, bot_tasks)
                    VALUES (?, ?, ?, ?, ?)''',
                  (user_data['user_id'], 
                   user_data.get('username', ''),
                   user_data['contact'],
                   user_data.get('business_type', ''),
                   user_data.get('bot_tasks', '')))
        self.conn.commit()
        return c.lastrowid

    def get_requests(self, status='new'):
        c = self.conn.cursor()
        c.execute("SELECT * FROM requests WHERE status = ? ORDER BY created_at DESC", (status,))
        return c.fetchall()

    def update_request_status(self, request_id: int, status: str):
        c = self.conn.cursor()
        c.execute("UPDATE requests SET status = ? WHERE id = ?", (status, request_id))
        self.conn.commit()

    def get_request_by_id(self, request_id: int):
        c = self.conn.cursor()
        c.execute("SELECT * FROM requests WHERE id = ?", (request_id,))
        return c.fetchone()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    def add_question(self, user_id: int, username: str, question: str):
        c = self.conn.cursor()
        c.execute('''INSERT INTO questions 
                    (user_id, username, question)
                    VALUES (?, ?, ?)''',
                  (user_id, username, question))
        self.conn.commit()
        return c.lastrowid

    def get_questions(self, answered=False):
        c = self.conn.cursor()
        if answered:
            c.execute("SELECT * FROM questions WHERE answer IS NOT NULL ORDER BY created_at DESC")
        else:
            c.execute("SELECT * FROM questions WHERE answer IS NULL ORDER BY created_at DESC")
        return c.fetchall()

    def answer_question(self, question_id: int, answer: str):
        c = self.conn.cursor()
        c.execute("UPDATE questions SET answer = ?, status = 'answered' WHERE id = ?", (answer, question_id))
        self.conn.commit()

    def get_question_by_id(self, question_id: int):
        c = self.conn.cursor()
        c.execute("SELECT * FROM questions WHERE id = ?", (question_id,))
        return c.fetchone()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    def add_to_knowledge_base(self, question: str, answer: str):
        c = self.conn.cursor()
        c.execute("INSERT INTO knowledge_base (question, answer) VALUES (?, ?)", (question, answer))
        self.conn.commit()

    def get_knowledge_base(self):
        c = self.conn.cursor()
        c.execute("SELECT question, answer FROM knowledge_base ORDER BY created_at DESC")
        return c.fetchall()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    def get_inactive_leads(self, days=2):
        c = self.conn.cursor()
        c.execute('''SELECT * FROM requests 
                    WHERE status = 'new' 
                    AND date(created_at) <= date('now', ?)''', (f'-{days} days',))
        return c.fetchall()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def get_stats(self):
        c = self.conn.cursor()
        stats = {}

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        c.execute("SELECT COUNT(*) FROM requests")
        stats['total_requests'] = c.fetchone()[0]

        # –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
        c.execute("SELECT COUNT(*) FROM requests WHERE status = 'new'")
        stats['new_requests'] = c.fetchone()[0]

        # –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏
        c.execute("SELECT COUNT(*) FROM requests WHERE status = 'accepted'")
        stats['accepted_requests'] = c.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        c.execute("SELECT COUNT(*) FROM questions")
        stats['total_questions'] = c.fetchone()[0]

        # –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        c.execute("SELECT COUNT(*) FROM questions WHERE answer IS NULL")
        stats['unanswered_questions'] = c.fetchone()[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        c.execute("SELECT COUNT(*) FROM managers WHERE is_active = TRUE")
        stats['active_managers'] = c.fetchone()[0]

        return stats

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    def add_manager(self, user_id: int, username: str):
        c = self.conn.cursor()
        try:
            c.execute("INSERT INTO managers (user_id, username) VALUES (?, ?)", (user_id, username))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def get_active_managers(self):
        c = self.conn.cursor()
        c.execute("SELECT user_id FROM managers WHERE is_active = TRUE")
        return [row[0] for row in c.fetchall()]

    def remove_manager(self, user_id: int):
        c = self.conn.cursor()
        c.execute("DELETE FROM managers WHERE user_id = ?", (user_id,))
        self.conn.commit()

    def is_manager(self, user_id: int):
        c = self.conn.cursor()
        c.execute("SELECT COUNT(*) FROM managers WHERE user_id = ? AND is_active = TRUE", (user_id,))
        return c.fetchone()[0] > 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# ===== –¢–ï–ö–°–¢–´ =====
GREETING = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ {Config.BUSINESS_NAME}.
–ü–æ–º–æ–≥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é Telegram-–±–æ—Ç–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

SERVICE_INFO = f"""
‚ö°Ô∏è *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*
- –°–æ–∑–¥–∞–Ω–∏–µ AI-–±–æ—Ç–æ–≤ –¥–ª—è Telegram
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –ë–æ—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

‚è± *–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* {Config.DEVELOPMENT_TIME}
üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {Config.SERVICE_PRICE}

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {Config.SUPPORT_PHONE}
"""

REQUEST_FLOW = [
    "üìù –î–ª—è –∫–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω—É–∂–µ–Ω –±–æ—Ç?",
    "üîß –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –±–æ—Ç?",
    "üì± –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):"
]

# ===== –§–£–ù–ö–¶–ò–ò –ö–ù–û–ü–û–ö =====
def get_menu_buttons():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    return [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_ai_question')]
    ]

def get_main_menu_keyboard(user_id=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='request_bot')],
        [InlineKeyboardButton("‚ÑπÔ∏è –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='info')],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_ai_question')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    if user_id and (user_id == Config.ADMIN_USER_ID or db.is_manager(user_id)):
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    return InlineKeyboardMarkup(keyboard)

def get_admin_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data='admin_requests')],
        [InlineKeyboardButton("‚ùì –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='admin_questions')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data='admin_knowledge')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data='admin_add_manager')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data='admin_remove_manager')],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data='admin_list_managers')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# ===== –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í =====
def is_admin_or_manager(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    return user_id == Config.ADMIN_USER_ID or db.is_manager(user_id)

# ===== AI –§–£–ù–ö–¶–ò–ò =====
async def generate_ai_response(user_input: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge = db.get_knowledge_base()
        user_input_lower = user_input.lower()

        for question, answer in knowledge:
            if any(word in user_input_lower for word in question.lower().split() if len(word) > 3):
                return f"üí° {answer}\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É!"

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–º
        bot_keywords = ["–±–æ—Ç", "telegram", "—Å–æ–∑–¥–∞–Ω–∏", "—Ä–∞–∑—Ä–∞–±", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑", "–ª–∏–¥", "–∑–∞—è–≤–∫", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü"]
        price_keywords = ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ", "–ø—Ä–∞–π—Å", "—Ç–∞—Ä–∏—Ñ", "–æ–ø–ª–∞—Ç–∞", "—Å—Ç–æ–∏—Ç", "–¥–µ–Ω—å–≥–∏"]
        time_keywords = ["—Å—Ä–æ–∫", "–≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞", "–±—ã—Å—Ç—Ä–æ", "–¥–æ–ª–≥–æ"]
        function_keywords = ["—Ñ—É–Ω–∫—Ü–∏–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—á—Ç–æ —É–º–µ–µ—Ç", "–º–æ–∂–µ—Ç", "–¥–µ–ª–∞—Ç—å","—Ç—ã –∫—Ç–æ"]
        payment_keywords = ["–æ–ø–ª–∞—Ç–∞", "–ø–ª–∞—Ç–µ–∂", "–¥–µ–Ω—å–≥–∏", "–∫–∞—Ä—Ç–∞", "–ø–µ—Ä–µ–≤–æ–¥"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á—Ç–æ –ø–æ—Ö–æ–∂ –≤–æ–ø—Ä–æ—Å
        if any(keyword in user_input_lower for keyword in price_keywords):
            return "üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö —É—Å–ª—É–≥:*\n\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç - –æ—Ç 80 000 —Ç–µ–Ω–≥–µ\n‚Ä¢ –ë–æ—Ç —Å AI - –æ—Ç 125 000 —Ç–≥.\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM - –æ—Ç 175 000 —Ç–≥.\n‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –æ—Ç 250 000 —Ç–≥.\n\n–¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!"

        elif any(keyword in user_input_lower for keyword in time_keywords):
            return "‚è± *–°—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:*\n\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç - 3-5 –¥–Ω–µ–π\n‚Ä¢ –°—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - 7-14 –¥–Ω–µ–π\n‚Ä¢ –°–ª–æ–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç - 10-20 –¥–Ω–µ–π\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!"

        elif any(keyword in user_input_lower for keyword in function_keywords):
            return "üîß *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤:*\n\n‚Ä¢ –ü—Ä–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫\n‚Ä¢ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏\n‚Ä¢ –ü—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π\n‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å\n‚Ä¢ –†–∞–±–æ—Ç–∞ 24/7"

        elif any(keyword in user_input_lower for keyword in payment_keywords):
            return "üí≥ *–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:*\n\n‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n‚Ä¢ –†–∞—Å—Å—Ä–æ—á–∫–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, 50% –ø–æ—Å–ª–µ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞."

        elif any(keyword in user_input_lower for keyword in bot_keywords):
            return f"ü§ñ *–û –Ω–∞—à–∏—Ö Telegram-–±–æ—Ç–∞—Ö:*\n\n–ú—ã —Å–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç—ã —Å AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞:\n\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂\n‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n{SERVICE_INFO}"

        elif "–∫–æ–Ω—Ç–∞–∫—Ç" in user_input_lower or "—Å–≤—è–∑–∞—Ç—å—Å—è" in user_input_lower:
            return f"üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n–¢–µ–ª–µ—Ñ–æ–Ω: {Config.SUPPORT_PHONE}\n–ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n\n–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ - –º—ã —Å–∞–º–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞."

        elif "–ø—Ä–∏–≤–µ—Ç" in user_input_lower or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in user_input_lower:
            return f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ {Config.BUSINESS_NAME}!\n\n–ü–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ Telegram-–±–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

        elif "—Å–ø–∞—Å–∏–±–æ" in user_input_lower or "–±–ª–∞–≥–æ–¥–∞—Ä" in user_input_lower:
            return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"

        else:
            # –í–µ–∂–ª–∏–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            return f"ü§ñ *–ü–æ–Ω—è–ª –≤–∞—Å!*\n\n–ú—ã –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ—à–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á.\n\n{SERVICE_INFO}\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ò–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?"

    except Exception as e:
        logger.error(f"AI response error: {str(e)}")
        return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é."

# ===== –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if Config.ADMIN_USER_ID:
        try:
            await context.bot.send_message(
                chat_id=Config.ADMIN_USER_ID,
                text=message
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def notify_managers(context: ContextTypes.DEFAULT_TYPE, message: str, question_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    manager_ids = db.get_active_managers()
    if not manager_ids:
        logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for manager_id in manager_ids:
        try:
            keyboard = []
            if question_id:
                keyboard.append([InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f'answer_question_from_manager_{question_id}')])
            keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
            
            await context.bot.send_message(
                chat_id=manager_id,
                text=f"üì¢ *–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!*\n\n{message}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

async def send_answer_to_user(context: ContextTypes.DEFAULT_TYPE, question_id: int, answer: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å"""
    question_data = db.get_question_by_id(question_id)
    if not question_data:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å —Å ID {question_id}")
        return

    user_id = question_data[1]
    menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üí¨ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n{answer}",
            reply_markup=menu_buttons
        )
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.message.from_user.id
    context.user_data.clear()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ Config
    if user_id in Config.MANAGER_USER_IDS:
        db.add_manager(user_id, update.message.from_user.username)

    reply_markup = get_main_menu_keyboard(user_id)
    await update.message.reply_text(GREETING, reply_markup=reply_markup)

async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    try:
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
        if query.data == 'back_to_menu':
            context.user_data.clear()
            reply_markup = get_main_menu_keyboard(user_id)
            await query.edit_message_text(text=GREETING, reply_markup=reply_markup)
            return

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI"
        elif query.data == 'ask_ai_question':
            context.user_data['mode'] = 'ai_question'
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await query.edit_message_text(
                text="ü§ñ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞:",
                reply_markup=menu_buttons
            )
            return

        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        elif query.data == 'request_bot':
            context.user_data['step'] = 0
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await query.edit_message_text(text=REQUEST_FLOW[0], reply_markup=menu_buttons)

        elif query.data == 'info':
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await query.edit_message_text(text=SERVICE_INFO, reply_markup=menu_buttons, parse_mode=ParseMode.MARKDOWN)

        elif query.data == 'contact_manager':
            context.user_data['mode'] = 'contact'
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await query.edit_message_text(
                text="üì± –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username):",
                reply_markup=menu_buttons
            )

        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        elif query.data == 'admin_panel':
            if is_admin_or_manager(user_id):
                reply_markup = get_admin_keyboard()
                await query.edit_message_text("üîê *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            else:
                menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=menu_buttons)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        elif query.data.startswith('answer_question_from_manager_'):
            if is_admin_or_manager(user_id):
                question_id = int(query.data.split('_')[-1])
                context.user_data['answering_question_as_manager'] = question_id
                reply_markup = InlineKeyboardMarkup(get_menu_buttons())
                await query.edit_message_text(
                    text=f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}:",
                    reply_markup=reply_markup
                )
            else:
                menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=menu_buttons)

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        elif query.data.startswith('admin_') and is_admin_or_manager(user_id):
            await handle_admin_callbacks(query, context)
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
        elif query.data.startswith(('accept_req_', 'reject_req_')) and is_admin_or_manager(user_id):
            await handle_request_actions(query, context)
            
        else:
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=menu_buttons)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu_buttons)
        except:
            pass

async def handle_request_actions(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
    user_id = query.from_user.id
    
    if query.data.startswith('accept_req_'):
        request_id = int(query.data.split('_')[2])
        db.update_request_status(request_id, "accepted")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        request_data = db.get_request_by_id(request_id)
        if request_data:
            try:
                await context.bot.send_message(
                    chat_id=request_data[1],
                    text=f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–ó–∞—è–≤–∫–∞ #{request_id}",
                    reply_markup=InlineKeyboardMarkup(get_menu_buttons()),
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        
        reply_markup = get_admin_keyboard()
        await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=reply_markup)

    elif query.data.startswith('reject_req_'):
        request_id = int(query.data.split('_')[2])
        db.update_request_status(request_id, "rejected")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        request_data = db.get_request_by_id(request_id)
        if request_data:
            try:
                await context.bot.send_message(
                    chat_id=request_data[1],
                    text=f"‚ùå *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∞.*\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.\n\n–ó–∞—è–≤–∫–∞ #{request_id}",
                    reply_markup=InlineKeyboardMarkup(get_menu_buttons()),
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        
        reply_markup = get_admin_keyboard()
        await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", reply_markup=reply_markup)

async def handle_admin_callbacks(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = query.from_user.id

    if query.data == 'admin_requests':
        requests = db.get_requests()
        if not requests:
            reply_markup = get_admin_keyboard()
            await query.edit_message_text("üü¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç", reply_markup=reply_markup)
            return

        await query.edit_message_text("üìã –ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏...", reply_markup=None)
        
        for req in requests:
            text = f"üìã –ó–∞—è–≤–∫–∞ #{req[0]}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req[2] or 'N/A'}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: {req[3]}\nüè¢ –ë–∏–∑–Ω–µ—Å: {req[4]}\nüîß –ó–∞–¥–∞—á–∏: {req[5]}\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {req[7]}"

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_req_{req[0]}'),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_req_{req[0]}')
                ],
                [InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ]
            await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'admin_questions':
        questions = db.get_questions(answered=False)
        if not questions:
            reply_markup = get_admin_keyboard()
            await query.edit_message_text("üü¢ –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç", reply_markup=reply_markup)
            return

        await query.edit_message_text("‚ùì –ó–∞–≥—Ä—É–∂–∞—é –≤–æ–ø—Ä–æ—Å—ã...", reply_markup=None)
        
        for q in questions:
            text = f"‚ùì –í–æ–ø—Ä–æ—Å #{q[0]}\nüë§ –û—Ç: @{q[2] or 'N/A'}\nüìù –¢–µ–∫—Å—Ç: {q[3]}\nüìÖ –°–æ–∑–¥–∞–Ω: {q[5]}"

            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'answer_{q[0]}')],
                [InlineKeyboardButton("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
            ]
            await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'admin_stats':
        stats = db.get_stats()
        text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\nüìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_requests']}\nüÜï –ù–æ–≤—ã—Ö: {stats['new_requests']}\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: {stats['accepted_requests']}\n\n‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}\n‚è≥ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {stats['unanswered_questions']}\nüë®‚Äçüíº –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['active_managers']}"

        reply_markup = get_admin_keyboard()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    elif query.data == 'admin_knowledge':
        knowledge = db.get_knowledge_base()
        if not knowledge:
            reply_markup = get_admin_keyboard()
            await query.edit_message_text("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞", reply_markup=reply_markup)
            return

        text = "üìö *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:*\n\n"
        for i, (question, answer) in enumerate(knowledge[-5:], 1):
            text += f"{i}. *Q:* {question[:50]}...\n   *A:* {answer[:50]}...\n\n"

        reply_markup = get_admin_keyboard()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    elif query.data == 'admin_add_manager':
        context.user_data['mode'] = 'add_manager'
        reply_markup = get_admin_keyboard()
        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:", reply_markup=reply_markup)

    elif query.data == 'admin_remove_manager':
        context.user_data['mode'] = 'remove_manager'
        reply_markup = get_admin_keyboard()
        await query.edit_message_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:", reply_markup=reply_markup)

    elif query.data == 'admin_list_managers':
        active_managers = db.get_active_managers()
        if not active_managers:
            reply_markup = get_admin_keyboard()
            await query.edit_message_text("üë• –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=reply_markup)
            return

        text = "üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:*\n\n"
        for i, manager_id in enumerate(active_managers, 1):
            text += f"{i}. ID: {manager_id}\n"

        reply_markup = get_admin_keyboard()
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    elif query.data.startswith('answer_'):
        question_id = int(query.data.split('_')[1])
        context.user_data['answering_question'] = question_id
        reply_markup = get_admin_keyboard()
        await query.edit_message_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "N/A"
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if 'answering_question_as_manager' in context.user_data:
        if is_admin_or_manager(user_id):
            question_id = context.user_data['answering_question_as_manager']
            answer = text
            db.answer_question(question_id, answer)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            question_data = db.get_question_by_id(question_id)
            if question_data:
                db.add_to_knowledge_base(question_data[3], answer)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_answer_to_user(context, question_id, answer)

            reply_markup = InlineKeyboardMarkup(get_menu_buttons())
            await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=reply_markup)
            del context.user_data['answering_question_as_manager']
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if user_id == Config.ADMIN_USER_ID and 'answering_question' in context.user_data:
        question_id = context.user_data['answering_question']
        answer = text
        db.answer_question(question_id, answer)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        question_data = db.get_question_by_id(question_id)
        if question_data:
            db.add_to_knowledge_base(question_data[3], answer)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–≤–µ—Ç–µ
        await send_answer_to_user(context, question_id, answer)

        reply_markup = get_admin_keyboard()
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=reply_markup)
        del context.user_data['answering_question']
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if 'mode' in context.user_data:
        if context.user_data['mode'] == 'add_manager' and user_id == Config.ADMIN_USER_ID:
            try:
                manager_user_id = int(text)
                if db.add_manager(manager_user_id, "N/A"):
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ã.")
                else:
                    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            finally:
                del context.user_data['mode']
                reply_markup = get_admin_keyboard()
                await update.message.reply_text("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
                return

        elif context.user_data['mode'] == 'remove_manager' and user_id == Config.ADMIN_USER_ID:
            try:
                manager_user_id = int(text)
                db.remove_manager(manager_user_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            finally:
                del context.user_data['mode']
                reply_markup = get_admin_keyboard()
                await update.message.reply_text("üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
                return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
    if 'step' in context.user_data:
        step = context.user_data['step']

        if step == 0:
            context.user_data['step'] = 1
            context.user_data['business_type'] = text
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await update.message.reply_text(REQUEST_FLOW[1], reply_markup=menu_buttons)

        elif step == 1:
            context.user_data['step'] = 2
            context.user_data['bot_tasks'] = text
            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await update.message.reply_text(REQUEST_FLOW[2], reply_markup=menu_buttons)

        elif step == 2:
            request_data = {
                'user_id': user_id,
                'username': username,
                'contact': text,
                'business_type': context.user_data.get('business_type', ''),
                'bot_tasks': context.user_data.get('bot_tasks', '')
            }

            request_id = db.add_request(request_data)
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            message = f"üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}!\n\nüë§ –û—Ç: @{username}\nüè¢ –ë–∏–∑–Ω–µ—Å: {request_data['business_type']}\nüîß –ó–∞–¥–∞—á–∏: {request_data['bot_tasks'][:100]}...\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: {text}"
            await notify_admin(context, message)
            await notify_managers(context, message)

            menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
            await update.message.reply_text(
                "‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞: 1-2 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=menu_buttons,
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –≤–æ–ø—Ä–æ—Å–∞
    elif context.user_data.get('mode') == 'ai_question':
        question_id = db.add_question(user_id, username, text)
        logger.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        message = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id}!\n\nüë§ –û—Ç: @{username}\nüìù –í–æ–ø—Ä–æ—Å: {text}"
        await notify_admin(context, message)
        await notify_managers(context, message, question_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç
        response = await generate_ai_response(text)
        menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
        await update.message.reply_text(response, reply_markup=menu_buttons, parse_mode=ParseMode.MARKDOWN)
        context.user_data.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    elif context.user_data.get('mode') == 'contact':
        message = f"üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n\nID: {user_id}\nUsername: @{username}\n–ö–æ–Ω—Ç–∞–∫—Ç: {text}"
        await notify_admin(context, message)
        await notify_managers(context, message)
        
        menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
        await update.message.reply_text(
            "‚úÖ *–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É.*\n\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
            reply_markup=menu_buttons,
            parse_mode=ParseMode.MARKDOWN
        )
        context.user_data.clear()

    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI
    else:
        question_id = db.add_question(user_id, username, text)
        logger.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        message = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å #{question_id}!\n\nüë§ –û—Ç: @{username}\nüìù –í–æ–ø—Ä–æ—Å: {text}"
        await notify_admin(context, message)
        await notify_managers(context, message, question_id)

        response = await generate_ai_response(text)
        menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
        await update.message.reply_text(response, reply_markup=menu_buttons, parse_mode=ParseMode.MARKDOWN)

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not is_admin_or_manager(user_id):
        menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", reply_markup=menu_buttons)
        return

    reply_markup = get_admin_keyboard()
    await update.message.reply_text("üîê *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# ===== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =====
async def send_reminders(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ª–∏–¥–∞–º"""
    try:
        inactive_leads = db.get_inactive_leads()
        for lead in inactive_leads:
            try:
                menu_buttons = InlineKeyboardMarkup(get_menu_buttons())
                await context.bot.send_message(
                    chat_id=lead[1],
                    text="üëã *–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞!*\n\n–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
                    reply_markup=menu_buttons,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
async def main():
    if not Config.TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.")
        return

    if not Config.ADMIN_USER_ID:
        logger.warning("ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    if not Config.MANAGER_USER_IDS:
        logger.warning("MANAGER_USER_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(Config.TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callbacks))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if application.job_queue:
        try:
            application.job_queue.run_repeating(
                send_reminders,
                interval=Config.REMINDER_INTERVAL,
                first=10
            )
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        webhook_url = Config.get_webhook_url()
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º: {webhook_url}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        await application.bot.set_webhook(url=f"{webhook_url}/webhook")
        
        # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
        app = Flask(__name__)
        
        @app.route('/webhook', methods=['POST'])
        def webhook():
            json_data = request.get_json()
            update = Update.de_json(json_data, application.bot)
            asyncio.create_task(application.process_update(update))
            return 'OK'
        
        @app.route('/', methods=['GET'])
        def health_check():
            return f'Bot is running! Webhook URL: {webhook_url}/webhook'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        app.run(host='0.0.0.0', port=Config.PORT)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        # Fallback –∫ polling –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logger.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling —Ä–µ–∂–∏–º...")
        await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())